generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  isAdmin       Boolean    @default(false)
  image         String?
  accounts      Account[]
  sessions      Session[]
  orders Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Category {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    title     String
    desc      String
    img       String
    color     String
    slug      String   @unique
    products  Product[]
}

model Product {
    id         Int      @id @default(autoincrement())
    createdAt  DateTime @default(now())
    title      String 
    desc       String
    img        String?
    isFeatured Boolean  @default(false)
    options    Json[]
    price      Float
    category   Category @relation(fields: [catslug], references: [slug])
    catslug    String
}

model Order {
    id        String   @id @default(cuid())
    createdAt   DateTime @default(now())
    products    Json[]
    status      String   @default("pending")
    price       Decimal
    internalId  String?  @unique
    user        User @relation(fields: [userEmail], references: [email])
    userEmail   String
}